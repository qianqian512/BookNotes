####ConcurrentHashMap概述
宏观来看，ConcurrentHashMap与HashMap结构类似，都是用数组存储一组Node节点，通过key的hash值选择应落入的节点，当发生Hash碰撞时，将新节点追加的链表的尾部，
当链表长度超过8时，为了提高查询效率将链表进行树化。ConcurentHashMap在JDK8中另一个亮点是扩容方法：再扩容时为了不影响读写的效率，采用无锁多线程扩容的方式。

####基本put流程
添加节点时，存在以下4种情况:
  1.Node数组还未初始化：
      a) 通过CAS方式尝试将sizeCtlCopy值改成-1，如果成功则抢到初始化Node数组的权限，如果失败则Thread.yield让出CPU时间片，等过会再判断Node数组是否初始化完成。
      b) Node数组初始化完成后，则继续自旋式添加节点，此时可能会走到下面2/3/4三个流程
  2.KV落入的Slot尚未初始化
  	  a) 通过CAS方式尝试初始化Slot的链表头元素；如果成功则直接break，顺利完成添加；如果失败则继续自旋，可能走到下面3/4两个流程。
  3.KV落入的节点正处于迁移状态
  	  a) 帮忙扩容
  4.正常添加
      a) 对Node进行加锁，确保只能有一个写线程访问这个Slot(避免了这个Slot不会被其他put或者transfer多线程操作)
      b) 进入临界区后再次判断当前Slot是否发生改变（避免迁移导致该Slot位置的头节点发生了变化）
      c) 如果当前Slot存的Node类型是链表，则使用尾插法将K-V插入到链表尾部（这里因为已经是临界区，就可以直接操作指针，不用CAS），当链表长度超过8时	进行树化。
      d) 如果当前Slot存的Node类型是红黑树，则向红黑树中添加节点，然后调整树平衡结构

####基本get流程
   ConcurrentHashMap的get方法就是无锁操作，先根据key计算出hash值，然后找到对应的Slot，落入Slot后此时只有3种情况：
   	  a) 判断落到Slot的第一个节点key是否相等，命中则返回对应的value，查找完成。
   	  b) 判断落到Slot的Node类型如果是链表，则遍历链表节点。
   	  c) 判断落到Slot的Node类型如果是红黑树，则调用tree.find方法查找节点，命中则返回。

####计数流程
   1.优先判断LongAdder是否可用，如果可用则直接在LongAdder上修改。
   2.LongAdder不可用时，则通过CAS机制尝试直接修改BaseCount，如果修改成功，则计数完成。如果失败，则进入到流程2
   3.竞争失败的线程继续尝试在LongAdder中计数：
      a) 为每个线程生成一个固定的随机数，对LongAdder长度取模
      b) 通过CAS修改LongAdder中的CountCell
      c) 如果修改失败重新则重新计算线程的hash值，再次进入自旋尝试修改
      d) 如果(c)仍然修改失败，则对数组进行扩容，将新的CellValue直接等于1，即完成了+1操作。
   总结：通过热点分散的方式，将提高写入成功的效率。
  【Q1】ConcurrentHashMap为什么不直接引用LongAdder，而是将LongAdder代码copy到Map里：仔细阅读代码发现，ConcurrentHashMap复用了LongAdder大部分功能，但同时也将一些小细节融入到了LongAdder中，例如在LongAdder修改失败时，在方法内部还是会尝试修改ConcurrentHashMap中的BaseCount。
  【Q2】LongAdder中的Cells什么时候扩容，以及怎么扩容的？（在2次竞争失败时扩容：第一次使用默认hash找到Cells的Slot尝试修改，失败后重新hash再使用新的Cells的Slot竞争，如果还是失败则进行扩容，每次扩容2倍增长，直到长度等于cpu数量。）

####扩容流程
   1.触发扩容线程动作：
      a) 分配一个更大的Node数组，然后更新全局迁移起始下标TransferIndex，代表在TransferIndex之前的Node已经处于迁移，新来的线程需要帮忙迁移TransferIndex之后的Node
      b) 根据偏移量TransferIndex，确定本轮要迁移的起始位置结束位置。
      c) 确定位置后，开始从右向左进行迁移
      d) 对迁移的节点进行加锁，与节点上的写操作互斥。
      e) 如果迁移的节点是一个链表，则通过高低位拆分，然后低位保持原下标，高位链表放到原下标+扩容的长度(迁移完成后，用ForwardingNode放入原始数组位置，代表已经迁移完成)
      f) 如果迁移的节点是一个红黑树，则通过高低位拆分，然后低位保持原下标，高位链表放到原下标+扩容的长度，并考虑是否要退化拆成链表。(迁移完成后，用ForwardingNode放入原始数组位置，代表已经迁移完成)
   2.帮忙扩容线程动作：
      a) 帮忙扩容的线程所在的slot，一定是一个ForwardNode，因此newTable已经创建完成，所以直接迁移节点。
   思考:
  【Q1】为什么要分段迁移呢：难道是处于性能考虑吗？减少其他线程帮忙时发生冲突？

####CMap的总指挥，sizeCtl的含义
 -1：代表table正在初始化
 -N：处于正在扩容状态，高16位标识扩容标识戳（标识了扩容过程中是否发生了二次扩容，同一条件下，任何线程计算出来的戳是一致的，这个戳是和库容前表的大小相），低16位参与扩容的线程数+1
  N：代表下次扩容时的table长度的阈值

####CMap.Node中hash的含义
 hash<0代表节点是红黑树
 -1:ForwardingNode
 -2:红黑树根节点
 -3:reverseNode？
  N:普通链表头节点 

####inittab时为什么要用thread.yield，能起到多大的作用？
> 在多个线程同时inittab时，只有一个线程能抢占成功，其他线程只能进行等待，对于抢占失败的线程如果不用Thread.yield，则会继续进行自旋尝试初始化，直到第一个线程inittab完成或者cpu时间片结束才会退出或挂起，这里yield让出时间片的多少是取决于OS调度的。

####扩容时是如何保证线程安全的
 1) 在初始化扩容Map时，会通过CAS的方式确保只有一个线程能初始化
 2) 在开始扩容时，多个线程通过CAS写TransferIndex来保证同一个Slot只有一个线程进行迁移
 3) 确定迁移下标后，对下标位置的Node进行加锁，确保Node对其他线程的写或迁移进行互斥。
 
####ConcurrentHashMap如何统计size的
> 利用热点分散，先CAS竞争修改BaseCount字段，失败后再分散到修改CountCell数组。最终统计时利用BaseCount+sum(CountCell)即可
> 如果竞争修改CountCell失败，会重新计算线程随机数，尝试对其他CountCell进行修改，如果竞争再次失败，则会对CountCell进行扩容，增大热点范围。
> CountCell扩容终止条件时，当内部Cell数量超过CPU数量时，即停止扩容。

#####负载因子可以修改吗？
不可以修改，默认是0.75，final修饰，通过概率算法泊松分布计算得出。

####最后一个退出扩容任务的线程做哪些收尾工作
> 当sizeCtl低16位减一后等于1时，判定自己是last线程，recheck老表，期望全部slot都是forwrd节点，如果不是则再迁移。
> 计算出下一次扩容的阈值，保存到sizeCtl
> 最后一个退出的线程，则将就table的地址更新指向新table的地址，这样后面的操作就是新table的操作了。

####如果TreeBin处于读时，有写线程进来怎么处理
无法写入，写线程会将Thread引用放到TreeBin对象中，将statebit位第二位标记为有线程等待写，然后使用LockSupport.park()挂起线程，
然后等待读完毕后检查state第二个位标志位，发现有等待写线程，再唤醒即可。

####红黑树节点面对读写并发时怎么处理
读数据时，不能进行写操作：由于写数据会对红黑树早晨失衡，这时读线程无法在一个正在发生变化的树上进行查询。
TreeBin有一个state字段，每个线程读数据之前，都有会CAS将state+4，读完后再-4，写线程在写数据前会检查state字段是不是0

####如果TreeBin处于写操作(state=1)，有读线程来了怎么办？
TreeBin内部维护两个存储结构，一个是Tree本身，还有是链表结构，此时因为Tree可能存在调整，因此会将读请求转发到链表上去




