#### Redis是如何清理过期key的
 1.【存储层面】Redis针对有过期时间的key，都会统一额外保存到RedisServer节点的中一个dict类型的expires字段中，其中dict的key就是expired.key，dict.value则代表expired.time
  [补充] expires中的key肯定也会存在db中，因此他们的key都是共享的对象，对于redis而言，每为一个key增加过期时间，不管key多长，只需要额外增加16字节存储即可（8字节指向db的key；8字节用于存long类型的毫秒数时间戳）
 2.【执行层面】Redis对过期键删除采用2种方式，一个是定期删除，一个是惰性删除。
  a) 定期删除：类似JVM中的G1在GC时可以控制停顿时间，属于在清理过期和保证系统正常运行的一种折中方案。
  b) 惰性删除：如果策略1的定期删除机制还没来得及删除这个key，此时有客户端来操作，那么redis会判断一下key的过期时间，如果过期则进行删除。
  
#### Redis是如何实现自动保存RDB文件的
 1.【存储层面】RedisServer中记录了2个字段，dirty(修改计数器)和lastsave(上一次执行修改的时间)，通过这两个字段实现了可以根据按时间、或按修改次数自动数据快照的方式。
 2.【执行层面】RedisServer有一个后台线程，会周期性(100ms)的被调用从而执行一些check的工作，其中一项工作就是判断是否需要执行RDB持久化，其判断条件就是对比redis配置与dirty、lastsave字段而决定。
 
#### Redis运行期间，有2个List类型的key，一个较小用ziplist存储，一个较大用linkedlist存储。那么在持久化的时候，是用什么数据类型呢？
 还是保持原始的数据类型，不会以为持久化而改变编码模式，这样才能保证持久化前后数据的内存模型一致。

#### RDB文件结构
【实例部分】
 	| 魔数 | RDB版本号 | 数据内容 | EOF | 校验和 |
【数据内容】
	| SELECTDB_FLAG |  DB_INDEX | KV_PARIRS |
【不带过期时间的kv】
	| Type | key | value |
【带过期时间的kv】
	| EXPIRED_TIME_FLAG | EXPIRED_TIME | Type | key | value |
【Type分类】
	总结一下：Type的分类不是根据Redis数据类型，而是根据Redis存储结构进行的分类，这样的好处就是在反序列化RDB文件后，内存中的数据模型与持久化前一致。

#### 项目中的生产环境，使用了哪种持久化模式?
  sms-basic项目采用的是一主一备的复制模式，其中master是rdb，slave是rdb+aof

#### 怎么判断是主从还是主备？
  我自己的判断方式，通过登录到slave节点发送info命令，如果返回的clients字段判断是slave还是backup。一般slave的客户端连接数和master差不多，而backup连接数一般都是0。

#### AOF持久化原理与过程
 1.与RDB不同的是，AOF是通过执行命令行的方式记录了Redis数据库的快照。
 2.Redis的主进程就是一个事件循环机制，单循环动作分为3个步骤：
    a) 执行文件事件
    b) 执行时间调度事件
    c) 考虑是否要进行AOF持久化
  在第3步，Redis会根据AOF策略来选择持久化的方式，其中可以分为以下3种：
    a) always：同步实时刷盘（可靠性高，但性能损耗比较严重）。
    b) everysec：启用一个后台线程，然后每秒执行一次刷盘（在可靠性和性能中间的一种折中方案）。
    c) no：redis不会主动刷盘，而是交由给OS来处理（性能快，但可靠性缺失）。

#### AOF文件载入过程
 加载AOF文件时，因为面对的文件内容均为Redis命令行，所以Redis会创建一个FakeClient，这个终端与普通终端最大区别就是非网络连接方式通信，这么做的主要原因是因为Redis的命令行只能在客户端上下文中执行，而我们载入
 AOF文件的方式恰恰又不是网络连接，因此Redis服务器启动了一个伪客户端来加载AOF文件。

#### 为什么要进行AOF文件重写
 为了解决AOF文件体积过大的问题，Redis提供了AOF文件重写功能，省略中间执行步骤，只记录数据终态。
 [注意] 如果单个key的value过多，Redis也会将一条命令拆成多条命令，以一个类型为List的key为例：如果这个key的value有上万个，aof文件也会将它拆成多条命令执行。

#### 怎么保证主线程和AOF后台进程数据一致性
 在Redis启动AOF线程后，会将所有增量数据写到一个AOF缓冲区中，通过这种方式保证库中数据和AOF文件日志对齐。

#### 对比RDB和AOF的优缺点和各自使用场景。
 RDB：记录快照慢；恢复载入快。
 AOF：支持增量方式记录快照；恢复加载速度比RDB慢。

#### Redis的垃圾回收策略，对比Java的GC，各自有什么特点，为什么采用现有的方案？
  1.Redis中为了保证充分利用空间，对于不同key但相同的value，只会创建一份，然后另多个key指向同一个value，以此方式达到共享内存，节约空间的目的。
  2.在redis中任何一个key对应的value，都有Object类型的封装，例如sdsObject/ListObject/SortedSetObject等，其中所有的XXX-Object都有一个refCount字段，这个字段就记录了当前value被key引用的次数，当refCount=0时就代表这个对象没有任何引用，可以被回收了。
  3.【存储】redis采用引用计数回收，之所以不像Java使用标记可达追踪，是因为Redis中不存在循环引用的问题。
  4.【执行】后台BG线程执行删除；主进程执行惰性删除。
  
 [思考] Redis在GC时会清理碎片来保证空间使用率吗？
 	4.0之前是没有办法保证的；在4.0以后可以通过配置activedefrag参数来设置。
 
 [思考] Redis的内存碎片是怎么产生的
 	频繁创建删除，且删除留下的空间过小，导致大的内存分配不上。
 
 [思考] 怎么判断生产环境内存碎片情况
    通过info命令返回的mem_fragmentation_ratio字段，该值计算公式=物理消耗内存÷Redis使用内存，结果用mem_fragmentation_ratio标识：
  	a) mem_fragmentation_ratio < 1 表示Redis内存分配超出了物理内存，操作系统会开始进行内存和磁盘的换入换出，最终导致非常明显的响应延迟(因为已经借用了磁盘空间，所以此时无法统计碎片情况)；
	b) mem_fragmentation_ratio 在1到1.5之间是合理的；
	c) mem_fragmentation_ratio > 1.5 说明Redis消耗了实际需要物理内存的150%以上，其中50%是内存碎片率，可能是操作系统或Redis实例中内存管理变差的表现（一般保持在1~1.5之间是合理的）
	
 [思考] 如果生产环境碎片会有什么情况，会导致Redis无法分配空间吗？
 	猜测在碎片过多，而导致在内存分配失败时，应该会开始借用磁盘了，然后频繁的swap导致整体吞吐量下降。
 
 [思考] 如果生产环境碎片过多怎么办？如何避免
  	a) 对于正在运行的Redis，如果发现碎片过多，可以通过命令手动触发清理
  		I.	命令一：config set activedefrag yes
  		II.	命令二：memory purge
  	b) 在配置文件中启用activedefrag yes可以开启碎片整理功能:
  		active-defrag-ignore-bytes 100mb     ：碎片达到100MB时，开启清理。
		active-defrag-threshold-lower 10     ：当碎片超过 10% 时，开启清理。
		active-defrag-threshold-upper 100    ：内存碎片超过 100%，尽最大清理。
	   在处理的过程中，为了避免对正常请求的影响，同时又能保证性能。Redis 同时还提供了监控 CPU 占用比例的参数，在满足以下条件时才会保证清理正常开展：
 		active-defrag-cycle-min 5  ：清理内存碎片占用 CPU 时间的比例不低于此值，保证清理能正常开展。
		active-defrag-cycle-max 75 ：清理内存碎片占用 CPU 时间的比例不高于此值。一旦超过则停止清理，从而避免在清理时，大量的内存拷贝阻塞 Redis，导致其它请求延迟。

