#### 20210417问题梳理 
 1.一般注册中心为什么要保证CP，而不是AP；eurake为什么是AP，而不是CP？
 2.我们所使用的注册中心主要使用的是服务发现功能，为什么一定要保证CP呢？如果一个注册中心只能保证最终一致性会有什么问题吗？
 3.脑裂的意思是一个集群中出现了多个网络分区，会对不同的集群有什么影响？各个中间件是如何应对的？
    a) zookeeper：影响？；应对方案是采用多数派。
    b) redis：
    c) mysql：
    d) es：
 4.如果5个节点，出现5个分区，有解吗？

#### 服务注册中心架构演进
https://www.jianshu.com/p/5014bb302c7d

#### 对比Erueka/Zookeeper/Etcd/Consul/Nacos
 ##Zookeeper(ZAB协议/CP)
   1.Zookeeper是CP，分布式协同服务，突出一致性。对ZooKeeper的的每次请求都能得到一致的数据结果，但是无法保证每次访问服务可用性。如请求到来时，zookeer正在做leader选举，此时不能提供服务，即不满足A可用性。
   2.ZooKeeper是分布式协调服务，它的职责是保证数据（注：配置数据，状态数据）在其管辖下的所有服务之间保持同步、一致；所以就不难理解为什么ZooKeeper被设计成CP而不是AP特性的了，如果是AP的，那么将会带来恐怖的后果（注：ZooKeeper就像交叉路口的信号灯一样，你能想象在交通要道突然信号灯失灵的情况吗？）。而且，作为ZooKeeper的核心实现算法Zab，就是解决了分布式系统下数据如何在多个服务之间保持同步问题的。
   3.作为一个分布式协同服务，ZooKeeper非常好，但是对于Service发现服务来说就不合适了；因为对于Service发现服务来说就算是返回了包含不实的信息的结果也比什么都不返回要好；再者，对于Service发现服务而言，宁可返回某服务5分钟之前在哪几个服务器上可用的信息，也不能因为暂时的网络故障而找不到可用的服务器，而不返回任何结果。所以说，用ZooKeeper来做Service发现服务是肯定错误的，如果你这么用就惨了！
 
 ##Euerka(XXX/AP)
   1.是AP，高可用与可伸缩的Service发现服务，突出可用性。相对于Zookeeper而言，可能返回数据没有一致性，但是保证能够返回数据，服务是可用的。
   2.当网络分割故障发生时，每个Eureka节点，会持续的对外提供服务：接收新的服务注册同时将它们提供给下游的服务发现请求。这样一来，就可以实现在同一个子网中（same side of partition），新发布的服务仍然可以被发现与访问
   3.当 Eureka Server 收到客户端的注册、下线、心跳请求时，通过 PeerEurekaNode 向其余的服务器进行消息广播，如果广播失败则重试，直到任务过期后取消任务，此时这两台服务器之间数据会出现短暂的不一致。
 [问题]如果多个节点数据不一致，那么以谁的版本为准呢？也是以最新的为准吗？