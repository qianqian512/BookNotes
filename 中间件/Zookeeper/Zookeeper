#### Zookeeper如果配置偶数节点在发生脑裂时会怎样？
 如果发生脑裂的分区，每个小分区都不能选出leader，则整个集群将不会有leader，原leader也会将自己的leader标记删除，最终导致集群直接不可用。
 最终部署时，如果部署偶数节点和部署偶数-1个节点效果是一样的，例如部署5个节点和部署6个节点都是最多只能宕机2台，超过2台后就会导致集群不可用。

#### Zookeeper写入数据流程
   1.首先写操作只能通过leader发起
   2.leader在接到写请求后会将提案持久化存储，将zxid自增加1
   3.将提案「同步」广播给集群中其他Follower节点
   4.收到提案的Follower节点进行持久化存储。
   5.得到「超过半数」的Follower的ACK后，leader向所有follower异步发送commit命令。
   6.给客户端返回成功
 [思考] 为什么在leader选举阶段，整个集群对外是不可用的？
   1.因为写操作能通过leader进行，此时leader还未选出，所以对外写肯定是不可用
   2.而对于读操作，由于leader为选出，数据版本也尚未统一，为zab是典型的追求一致性牺牲了可用性，所以此时集群对外读也是不可用。
 [补充] 从写入流程可以看出，Zookeeper集群中写入其实是单点瓶颈的，但读请求是支持水平扩展的，所以适用于读多写少，对数据一致性高的场景。

#### Zookeeper选举策略
 简述：在没有leader时，优先比对zxid，次优先比对myid，最终选举出leader
 大致流程：
 	(1) 投票给自己
	(2) 找其他节点根据zxid和myid进行PK，并记录选票
	(3) 比对出选票最大的成为leader，其他节点成为follower
 [思考]如果集群中正在运行的2节点zxid都是100，且已形成1个leader+1个follower结构，此时新加入zxid是101的节点是否可以成为信任leader？
    不可以，新加入的节点只能遵循现有结构，成为第二个follower。Zookeeper之所以这么设计，是因为考虑zxid并不能完全代表包含最新数据版本。

#### 为什么zookeeper能保证一致性
  因为zookeeper牺牲了可用性，无论是在写数据，还是在选举时，都要求多数派机制保证，而且在写数据时还采用了二阶段提交，leader在只有在超过半数的follower给出ack后才回复客户端。
  
#### ZAB协议和Rust协议都是有Multi Paxos衍生出的分支，共性都是强一致性协议，那么区别是什么呢？
 【待补充】

#### Zookeeper中的Follower是如何处理写请求的？
   1.首先Follower节点要保证自己的leader之间的连接有效，如果连接失效，则follower处于Looking状态，此时读写请求都无法处理。
   2.当Follower节点确保自己有效，再接到写请求后会转发给leader，请求leader来进行协调其他Follower将数据写入。
   3.然后leader的写入流程参考上面整理记录。


